----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 09/21/2023 11:59:08 PM
-- Design Name: 
-- Module Name: sevenseg - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;
-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;
entity sevenseg is
    Port ( button : in STD_LOGIC;
            RST : in STD_LOGIC;
            CLK : in STD_LOGIC;
            clock_480 : in STD_LOGIC;
            clock_deci : in STD_LOGIC;
            miled: out STD_LOGIC_VECTOR (8 downto 0);
            anode : out STD_LOGIC_VECTOR (3 downto 0);
            cathode : out STD_LOGIC_VECTOR (6 downto 0));
  
    
end sevenseg;


architecture Behavioral of sevenseg is

    signal min2, min1, seg2, seg1, deci : integer:=0; --for the 4 leds on the seven-segment display
    signal PS, NS : STD_LOGIC_VECTOR (1 downto 0):="00"; --present state/next state
    signal ss1, ss2, en : STD_LOGIC:='0';
    
begin

    process(CLK)
    
begin
    if (rising_edge(CLK)) then
        PS <= NS;
end if;
end process;

adding : process (button, RST, clock_deci, PS, NS, ss1, ss2)
begin

if RST = '1' then --if reset is "high" then the clock will display all zeros
        deci <= 0;
        seg1 <= 0;
        seg2 <= 0;
        min1 <= 0;
        min2 <= 0;
    else
    if (rising_edge(clock_deci)) then
    
        if button = '1' then --to detect "risingedge" for the button
            ss1 <= '1';
            
        elsif button = '0' then
            ss1 <= '0';
end if;

        ss2 <= ss1;
        
        if ss2 = '0' and ss1 = '1' then
            en <= not en;
end if;

    case (PS) is
        when "11" => -- when the clock is already running
            if en = '1' then
            NS <= "11";
            
             deci <= deci + 1; --code to have the stopwatch actually count
            if deci = 9 then
                seg1 <= seg1 + 1;
                deci <= 0;
                
            if seg1 = 9 then
                seg2 <= seg2 + 1;
                seg1 <= 0;
                
            if seg2 = 5 then
                min1 <= min1 + 1;
                seg2 <= 0;
            if min1 = 9 then --rolls over when it gets to 59.99
                min2 <= min2 + 1;
                min1 <=0;
            if min2 = 6 then
                deci <= 0;
                seg1 <= 0;
                seg2 <= 0;
                min1 <= 0;
                min2 <=0;
                
end if;
end if;
end if;
end if;
end if;

    elsif en = '0' then
        NS <= "00";
end if;
        when "00" => --when the stopwatch is stopped
            if en = '0' then
                NS <= "00";
                deci <= deci;
                seg1 <= seg1;
                seg2 <= seg2;
                min1 <= min1;
                min2 <= min2;
                
         elsif en = '1' then
            NS <= "11";
end if;
        when others => --should never happen
        NS <= "00";
            deci <= 0;
            seg1 <= 0;
            seg2 <= 0;
            min1 <= 0;
            min2 <= 0;
            
end case;
end if;
end if;
end process;


led : process (clock_480) --tells leds when to turn on

    variable digit1, digit2 : unsigned (1 downto 0):="00";

begin
    if (rising_edge(clock_480)) then
    
    case (deci) is 
        when 0 =>
          miled <= "000000000";
        when 1 =>
          miled <= "100000000";
        when 2 =>
          miled <= "110000000";   
        when 3 =>
          miled <= "111000000"; 
        when 4 =>
          miled <= "111100000";
        when 5 =>
          miled <= "111110000";
        when 6 =>
          miled <= "111111000";  
        when 7 =>
          miled <= "111111100";
        when 8 =>
          miled <= "111111110"; 
        when 9 =>
          miled <= "111111111";
        when others =>
         miled <= "111111111";          
    end case;
    
  
    
    case (digit1) is
        when "00" =>
        anode <= "0111";
        when "01" =>
        anode <= "1011";
        when "10" =>
        anode <= "1101";
        when "11" =>
        anode <= "1110";
        end case;
        
    case (digit2) is
        when "00" =>
        case (min2) is
        when 0 =>
        cathode <= "0000001";
        when 1 =>
        cathode <= "1001111";
        when 2 =>
        cathode <= "0010010";
        when 3 =>
        cathode <= "0000110";
        when 4 =>
        cathode <= "1001100";
        when 5 =>
        cathode <= "0100100";
        when 6 =>
        cathode <= "0100000";
        when 7 =>
        cathode <= "0001111";
        when 8 =>
        cathode <= "0000000";
        when 9 =>
        cathode <= "0000100";
        when others =>
        cathode <= "1111111";
end case;

     when "01" =>
        case (min1) is
        when 0 =>
        cathode <= "0000001";
        when 1 =>
        cathode <= "1001111";
        when 2 =>
        cathode <= "0010010";
        when 3 =>
        cathode <= "0000110";
        when 4 =>
        cathode <= "1001100";
        when 5 =>
        cathode <= "0100100";
        when 6 =>
        cathode <= "0100000";
        when 7 =>
        cathode <= "0001111";
        when 8 =>
        cathode <= "0000000";
        when 9 =>
        cathode <= "0000100";
        when others =>
        cathode <= "1111111";
        end case;
        when "10" =>
            case (seg2) is
        when 0 =>
        cathode <= "0000001";
        when 1 =>
        cathode <= "1001111";
        when 2 =>
        cathode <= "0010010";
        when 3 =>
        cathode <= "0000110";
        when 4 =>
        cathode <= "1001100";
        when 5 =>
        cathode <= "0100100";
        when 6 =>
        cathode <= "0100000";
        when 7 =>
        cathode <= "0001111";
        when 8 =>
        cathode <= "0000000";
        when 9 =>
        cathode <= "0000100";
        when others =>
        cathode <= "1111111";
end case;


    when "11" =>
        case (seg1) is
        when 0 =>
        cathode <= "0000001";
        when 1 =>
        cathode <= "1001111";
        when 2 =>
        cathode <= "0010010";
        when 3 =>
        cathode <= "0000110";
        when 4 =>
        cathode <= "1001100";
        when 5 =>
        cathode <= "0100100";
        when 6 =>
        cathode <= "0100000";
        when 7 =>
        cathode <= "0001111";
        when 8 =>
        cathode <= "0000000";
        when 9 =>
        cathode <= "0000100";
        when others =>
        cathode <= "1111111";
end case;
end case;

digit1 := digit1 + 1;
digit2 := digit2 + 1;

end if;
end process;
end Behavioral;
